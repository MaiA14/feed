{"version":3,"sources":["history.js","services/HttpService.js","services/CommentService.js","components/CommentForm.js","components/CommentPreview.js","components/CommentList.js","components/CommentFilter.js","pages/FeedApp.js","App.js","serviceWorker.js","reducers/SystemReducer.js","reducers/index.js","store.js","index.js"],"names":["history","createBrowserHistory","axios","Axios","create","withCredentials","endpoint","data","ajax","a","async","method","url","res","console","log","dir","response","status","push","query","filterBy","HttpService","getCommentById","commentId","saveComment","comment","_id","deleteComment","then","CommentForm","state","gravatar","email","content","onSave","props","setState","inputChange","ev","fieldName","target","name","fieldValue","value","startsWith","this","setFormatDataForEdit","prevProps","className","type","required","placeholder","onChange","onClick","Component","CommentPreview","src","CommentList","comments","map","i","key","CommentFilter","changeInput","onSetFilter","id","Feed","loadComments","commentService","commentsUpdated","App","component","FeedApp","path","exact","Boolean","window","location","hostname","match","initialState","isLoading","rootReducer","combineReducers","system","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.613b6acc.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import history from '../history';\r\nimport Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null, dispatch) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, \r\n        with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n            history.push('/'); // diaspatch ('authorition error')\r\n        }\r\n        // diaspatch ('error')\r\n        throw err;\r\n    }\r\n}","import axios from 'axios';\r\nimport HttpService from './HttpService.js'\r\n\r\nvar Axios = axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    query,\r\n    getCommentById,\r\n    saveComment,\r\n    deleteComment,\r\n}\r\n\r\nfunction query(filterBy = '') {\r\n    return HttpService.get(`comment?filterBy=${filterBy}`)\r\n}\r\n\r\nfunction getCommentById(commentId) {\r\n    return HttpService.get(`comment/${commentId}`)\r\n}\r\n\r\nfunction saveComment(comment) {\r\n    if (comment._id)\r\n        return HttpService.put(`comment/${comment._id}`, comment)\r\n    return HttpService.post(`comment/`, comment)\r\n}\r\n\r\nfunction deleteComment(commentId) {\r\n    return HttpService.delete(`comment${commentId}`).then(res => res.data);\r\n}","import React, { Component } from 'react';\r\nexport default class CommentForm extends Component {\r\n\r\n    state = {\r\n        gravatar: 'https://he.gravatar.com/userimage/131942614/161c0e6bc0868e9a0253707495c1c546.jpeg',\r\n        email: '',\r\n        content: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setFormatDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.comment !== this.props.comment)\r\n            this.setFormatDataForEdit();\r\n    }\r\n\r\n    setFormatDataForEdit() {\r\n        const { comment } = this.props;\r\n        if (comment) {\r\n            this.setState({ email: comment.email, content: comment.content })\r\n        }\r\n    }\r\n\r\n    onSave = () => {\r\n        this.props.onSave(this.state);\r\n        this.setState({ email: '', content: '' });\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let fieldValue = ev.target.value;\r\n        if (!fieldValue || !fieldValue.startsWith(' ')){\r\n            this.setState({ [fieldName]: fieldValue });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-container\">\r\n                <form>\r\n                    <input type=\"email\" required placeholder=\"Email\" name=\"email\"\r\n                        onChange={this.inputChange} value={this.state.email}></input>\r\n                    <input type=\"text\" placeholder=\"Message\" name=\"content\"\r\n                        onChange={this.inputChange} value={this.state.content}></input>\r\n                <div className=\"form-buttons\">\r\n                    <button onClick={this.onSave} className=\"submit-button\">Submit</button>\r\n                </div>\r\n                </form>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function CommentPreview(props) {\r\n    return (\r\n        <div className=\"comment-preview\">\r\n            <div className=\"comment-line flex\">\r\n                <div className=\"comment-gravatar-preview\">\r\n                    <img src={props.comment.gravatar} className=\"gavatar-icon\"></img>\r\n                </div>\r\n                <div className=\"email-and-msg\">\r\n                    <div className=\"comment-email-preview\">{props.comment.email}</div>\r\n                    <div className=\"comment-content-preview\">{props.comment.content}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport CommentPreview from '../components/CommentPreview.js';\r\n\r\nexport default function CommentList(props) {\r\n    return <div className=\"list\">\r\n        {props.comments.map((comment, i) =>\r\n            <CommentPreview key={i} comment={comment} />)}\r\n    </div>\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class CommentFilter extends Component {\r\n\r\n    state = {\r\n        filterBy: ''\r\n    }\r\n\r\n    changeInput = (ev) => {\r\n        const field = ev.target.name;\r\n        let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n        this.props.onSetFilter(value)\r\n        let filterBy = value;\r\n        this.setState({ filterBy });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"search-comment\">\r\n                <input type=\"text\"\r\n                    name=\"filterBy\" placeholder=\"Filter\"\r\n                    value={this.state.filterBy}\r\n                    onChange={this.changeInput} />\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nimport commentService from '../services/CommentService.js';\r\nimport CommentForm from '../components/CommentForm.js';\r\nimport CommentList from '../components/CommentList.js';\r\nimport CommentFilter from '../components/CommentFilter.js';\r\n\r\nexport default class Feed extends Component {\r\n\r\n    state = {\r\n        comments: [],\r\n        filterBy: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadComments();\r\n    }\r\n\r\n    loadComments = () => {\r\n        let filterBy = this.state.filterBy;\r\n        commentService.query(filterBy).then((comments) => {\r\n            this.setState({ comments });\r\n        })\r\n    }\r\n\r\n    onSetFilter = (filterBy) => {\r\n        this.setState({filterBy},this.loadComments)\r\n    }\r\n\r\n    onSave = (comment) => {\r\n        commentService.saveComment(comment)\r\n        let commentsUpdated = this.state.comments\r\n        commentsUpdated.push(comment)\r\n        this.setState({ comments: commentsUpdated })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"app-title\">Feed</h1>\r\n                <p className=\"app-description\">Share your thoughts with the world!</p>\r\n                <div className=\"comments-container\">\r\n                    <div className=\"comment-form\">\r\n                        <CommentForm onSave={this.onSave}></CommentForm>\r\n                    </div>\r\n                    <div className=\"filter-container\">\r\n                        <CommentFilter filterBy={this.state.filterBy}\r\n                            onSetFilter={this.onSetFilter}></CommentFilter>\r\n                    </div>\r\n                    <CommentList comments={this.state.comments} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport { Router, Switch, Route} from 'react-router';\nimport history from './history';\nimport global from '../src/assets/styles/global.scss';\n\nimport FeedApp from '../src/pages/FeedApp.js';\n\nfunction App() {\n  return (\n    <div className=\"App\"> \n      <Router history={history}>\n        <Switch>\n        <Route component={FeedApp} path=\"/\" exact></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  isLoading: false\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'LOADING_START':\r\n      return { ...state, isLoading: true };\r\n    case 'LOADING_DONE':\r\n      return { ...state, isLoading: false };\r\n    default: return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport SystemReducer from './SystemReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  system: SystemReducer,\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n// TODO: use scss\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Store from './store';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}